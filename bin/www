#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('appchat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

connections = [];
users = [];
var username;
// socket io

var io = require('socket.io')(server);
io.on('connection',function(socket){
  connections.push(socket);
  console.log("user is connected");
  console.log('Connected : %s sockets connected',connections.length);
  socket.on('disconnect',function(data){

    connections.splice(connections.indexOf(socket), 1);
    console.log("user  diconnected");
    console.log('disconnected : %s sockets connected',connections.length);
    users.splice(users.indexOf(socket),1);
    updateUsernames();
    if(!username){
      return;
    }


  });
  /*socket.on('name',function (msguser){
    console.log(msguser.msg);
    console.log(msguser.user);
    io.emit('chat message',msguser.user+" : "+msguser .msg);
  });*/
 socket.on('chat message',function(msg){
   console.log(msg.msg);
   io.emit('chat message',{'msg':msg.msg,'username':msg.username});
 });


  socket.on('new user',function (data,callback) {
     callback(true);
      username = data;
      users.push(username);
      console.log(username);
      updateUsernames();
  });

  function updateUsernames(){
    io.emit('get users',users);
  }

});
